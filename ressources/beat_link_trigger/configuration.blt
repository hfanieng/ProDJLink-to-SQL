{:tracks-using-playlists? nil,
 :carabiner {:port 17000, :bars true},
 :playlist-on-air-only false,
 :window-positions {:carabiner [-399 170],
                    :waveform-detail-1 [1970 35 1772 266],
                    :triggers [585 407 847 298],
                    :playlist-writer [-1727 467],
                    :overlay [-594 347],
                    :nrepl [-1138 752],
                    :waveform-detail-2 [-1823 515 1196 234],
                    :player-status [2732 147]},
 :send-status? true,
 :triggers [{:bar true,
             :start "Start",
             :channel 1,
             :start-stop false,
             :note 127,
             :gear false,
             :stop true,
             :expressions {:tracked "(import '[java.net DatagramSocket DatagramPacket InetAddress])\n\n(defn send-udp [host port message]\n  (let [socket (DatagramSocket.)\n        address (InetAddress/getByName host)\n        buffer (.getBytes message)\n        packet (DatagramPacket. buffer (count buffer) address port)]\n    (.send socket packet)\n    (.close socket)))\n\n(when trigger-active?\n  (when (not= track-metadata (:last-track @locals))\n    (swap! locals assoc :last-track track-metadata)\n    (when (some? track-metadata)\n      (let [log-entry (json/write-str\n                        {:timestamp (str (java.time.LocalDateTime/now))\n\t\t\t\t\t:device device-name\n                         :artist track-artist\n\t\t\t\t\t:id rekordbox-id\n                         :title track-title\n                         :label track-label\n                         :bpm effective-tempo}\n                        :escape-slash false)\n            udp-host \"127.0.0.1\"  ; Ziel-Host\n            udp-port 7001]       ; Ziel-Port\n        (send-udp udp-host udp-port log-entry)))))"},
             :comment "To UDP",
             :outputs #beat_link_trigger.util.MidiChoice{:full-name "CoreMIDI4J - "},
             :send true,
             :players #beat_link_trigger.util.PlayerChoice{:number -1},
             :enabled "Always",
             :message "Note"}],
 :playlist-stopped-new-threshold 30,
 :playlist-auto-split false,
 :overlay {:public "/Users/heikofanieng/Documents/10 BLT",
           :templates "/Users/heikofanieng/Documents/10 BLT/obs"},
 :expressions {:setup ";; Create a socket for sending UDP to Python, and record the\n;; address and port to which such UDP messages should be sent.\n(swap! globals assoc :py-socket (java.net.DatagramSocket.))\n(swap! globals assoc :py-address (java.net.InetAddress/getLocalHost))\n(swap! globals assoc :py-port 7001)",
               :shared "(defn send-json-to-python\n  \"Encodes a map as JSON and sends it in a UDP packet\n  to Python.\"\n  [globals m]\n  (let [message (str (cheshire.core/encode m) \"\\n\")  ; Encode as JSON line.\n       {:keys [py-address py-port py-socket]} @globals  ; Find where to send.\n       data (.getBytes message)  ; Get JSON as raw byte array.\n       packet (java.net.DatagramPacket. data (count data) py-address py-port)]\n  (.send py-socket packet)))\n\n(add-library '[org.clojure/data.json \"2.4.0\"])\n(require '[clojure.data.json :as json])"},
 :playlist-min-play-seconds 10,
 :beat-link-trigger-version "8.0.0-SNAPSHOT-14-0x11967",
 :my-settings {"language" "GERMAN", "autoPlayMode" "CONTINUE"}}
